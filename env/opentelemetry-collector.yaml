receivers:
  otlp:
    protocols:
      grpc:
        endpoint: "0.0.0.0:4317"
      http:
        endpoint: "0.0.0.0:4318"

  prometheus:
    config:
      scrape_configs:
        - job_name: "opentelemetry-collector"
          scrape_interval: 10s
          static_configs:
            - targets: [ "${MY_POD_IP}:8888" ]

        - job_name: "spanmetrics"
          scrape_interval: 15s
          static_configs:
            - targets: [ "${MY_POD_IP}:9090" ]
          metric_relabel_configs:
            - source_labels: [ span_kind ]
              regex: SPAN_KIND_SERVER
              action: keep
            - source_labels: [ http_user_agent ]
              regex: kube-probe/.*
              action: drop
            - regex: http_user_agent
              action: labeldrop

  # receiver that's just a dummy and never used; added to pass validation requiring at least one receiver in a pipeline.
  otlp/spanmetrics:
    protocols:
      grpc:
        endpoint: "0.0.0.0:12345"

processors:
  batch:
    send_batch_size: 10000
    timeout: 1s

  spanmetrics:
    metrics_exporter: prometheus/spanmetrics
    dimensions:
      - name: http.method
      - name: http.status_code
      - name: http.user_agent

  tail_sampling:
    decision_wait: 3s
    num_traces: 100
    expected_new_traces_per_sec: 10
    policies: [
      {
        name: ignore-health-check-requests,
        type: string_attribute,
        string_attribute: { key: http.user_agent, values: [ kube-probe/* ], enabled_regex_matching: true, invert_match: true }
      },
      {
        name: sampling-100%,
        type: probabilistic,
        probabilistic: { sampling_percentage: 100 }
      },
    ]

exporters:
  otlp/jaeger:
    endpoint: $JAEGER_OTLP_ENDPOINT
    tls:
      insecure: true

  prometheus/spanmetrics:
    endpoint: "0.0.0.0:9090"
    metric_expiration: 70s

  prometheusremotewrite:
    endpoint: http://$PROMETHEUS_PUSHGATEWAY_ENDPOINT/api/v1/write

  logging:
    loglevel: debug
    sampling_initial: 2
    sampling_thereafter: 500

extensions:
  health_check:
    endpoint: "0.0.0.0:13133"

service:
  extensions: [ health_check, memory_ballast ]

  pipelines:
    traces:
      receivers: [ otlp ]
      processors: [ memory_limiter, batch, spanmetrics, tail_sampling ]
      exporters: [ logging, otlp/jaeger ]

    metrics/spanmetrics:
      receivers: [ otlp/spanmetrics ]
      exporters: [ prometheus/spanmetrics ]

    metrics:
      receivers: [ otlp, prometheus ]
      processors: [ memory_limiter, batch ]
      exporters: [ logging, prometheusremotewrite ]
